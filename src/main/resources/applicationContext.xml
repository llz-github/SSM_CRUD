<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd">

	<context:component-scan
		base-package="com.zl">
		<!-- 不扫controller -->
		<context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Controller" />
	</context:component-scan>

	<!-- spring 配置文件,配置和业务逻辑有关的 -->
	<!-- =================数据源,事务控制,xxx==================== -->
	<context:property-placeholder
		location="classpath:dbconfig.properties" />

	<bean id="pooledDataSource"
		class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="jdbcUrl" value="${jdbc.jdbcUrl}" />
		<property name="driverClass" value="${jdbc.driverClass}" />
		<property name="user" value="${jdbc.user}" />
		<property name="password" value="${jdbc.password}" />
	</bean>



	<!-- ======================配置和mybatis的整合====================== -->
	<bean id="sqlSessionFactory"
		class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 指定mybatis的全局配置文件的位置 -->
		<property name="configLocation"
			value="classpath:mybatis-config.xml"></property>
		<property name="dataSource" ref="pooledDataSource"></property>
		<!-- 指定mybatis,mapper文件的位置 -->
		<property name="mapperLocations"
			value="classpath:Mapper/*.xml"></property>
	</bean>

	<!-- 配置扫描器,将mybatis接口的实现加入到ioc容器中 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- 扫描所有DAO接口的实现,加入到ioc容器中 -->
		<property name="basePackage" value="com.zl.crud.Dao"></property>
	</bean>


	<!-- =============配置一个可以执行批量操作的sqlSession==================== -->
	<bean class="org.mybatis.spring.SqlSessionTemplate"
		id="sqlSession">
		<constructor-arg name="sqlSessionFactory"
			ref="sqlSessionFactory" />
		<constructor-arg name="executorType" value="BATCH" />
	</bean>

	<!-- ===============事务控制管理器==================== -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<!-- 控制住数据源 -->
		<property name="dataSource" ref="pooledDataSource" />
	</bean>

	<!-- 基于注解的事务,使用xml配置 -->
	<aop:config>
		<!-- 切入点表达式 -->
		<aop:pointcut
			expression="execution(* com.zl.crud.Service..*(..))" id="txPoint" />
		<!-- 配置事务增强 -->
		<aop:advisor advice-ref="txAdvice" pointcut-ref="txPoint" />
	</aop:config>

	<!-- 配置事务增强,事务如何切入 -->
	<tx:advice id="txAdvice">
		<tx:attributes>
			<!-- 所有方法都是事务方法 -->
			<tx:method name="*" />
			<!-- 以get方式的所有方法 -->
			<tx:method name="get*" read-only="true" />
		</tx:attributes>
	</tx:advice>
	<!-- spring配置文件的核心点 (数据源,与mybatis的整合,事务控制) -->


</beans>